import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';



const D3Chart = () => {
  const chartRef = useRef();

  useEffect(() => {
    
    // const csvData = `商品名,エネルギー,タンパク質,脂質,炭水化物,食塩相当量,食物繊維,糖質,ナトリウム,カリウム,トランス脂肪酸,飽和脂肪酸,カフェイン
    // メルティホワイト ピスタチオ,462.0,6.6,27.4,47.3,0.6,0.2,47.1,243.0,202.0,0.1,9.7,0.0
    // エスプレッソ  アフォガート,438.0,4.2,28.5,41.7,0.5,0.7,41.0,189.0,433.0,0.4,18.2,160.0
    // コーヒー,183.0,3.3,2.9,36.0,0.4,0.1,35.9,173.0,268.0,0.1,1.7,86.0
    // ダーク モカ チップ,312.0,4.5,12.9,44.7,0.5,2.1,42.5,200.0,552.0,0.1,8.3,98.0
    // キャラメル,302.0,3.7,12.0,44.9,0.5,0.1,44.8,192.0,289.0,0.2,7.5,86.0
    // 抹茶 クリーム,322.0,5.3,12.7,47.1,0.5,0.9,46.1,184.0,273.0,0.2,7.8,78.0
    // バニラ クリーム,255.0,4.5,12.4,31.5,0.5,0.1,31.4,184.0,206.0,0.2,7.7,0.0
    // マンゴー パッション ティー,140.0,0.7,0.0,34.4,0.2,1.0,33.4,95.0,209.0,0.0,0.0,0.0
    // My フルーツ³ グレープ ＆ ピーチ,425.0,7.7,15.2,66.6,0.6,,,,,,,
    // My フルーツ³ ストロベリー,360.0,7.9,11.9,57.4,0.6,,,,,,,`;

    const csvData = `商品名,エネルギー,タンパク質,脂質,炭水化物,食塩相当量,食物繊維,糖質,ナトリウム,カリウム,トランス脂肪酸,飽和脂肪酸,カフェイン
    メルティホワイト ピスタチオ フラペチーノ,462.0,6.6,27.4,47.3,0.6,0.2,47.1,243.0,202.0,0.1,9.7,0.0
    エスプレッソ  アフォガート フラペチーノ,438.0,4.2,28.5,41.7,0.5,0.7,41.0,189.0,433.0,0.4,18.2,160.0
    コーヒー フラペチーノ,183.0,3.3,2.9,36.0,0.4,0.1,35.9,173.0,268.0,0.1,1.7,86.0
    ダーク モカ チップ フラペチーノ,312.0,4.5,12.9,44.7,0.5,2.1,42.5,200.0,552.0,0.1,8.3,98.0
    キャラメル フラペチーノ,302.0,3.7,12.0,44.9,0.5,0.1,44.8,192.0,289.0,0.2,7.5,86.0
    抹茶 クリーム フラペチーノ,322.0,5.3,12.7,47.1,0.5,0.9,46.1,184.0,273.0,0.2,7.8,78.0
    バニラ クリーム フラペチーノ,255.0,4.5,12.4,31.5,0.5,0.1,31.4,184.0,206.0,0.2,7.7,0.0
    マンゴー パッション ティー フラペチーノ,140.0,0.7,0.0,34.4,0.2,1.0,33.4,95.0,209.0,0.0,0.0,0.0
    My フルーツ³ フラペチーノ グレープ ＆ ピーチ,425.0,7.7,15.2,66.6,0.6,,,,,,,
    My フルーツ³ フラペチーノ ストロベリー,360.0,7.9,11.9,57.4,0.6,,,,,,,`;
    
    // CSVデータを行ごとに分割
    const rows = csvData.split('\n');
    
    // ヘッダー行を取得
    const headers = rows[0].split(',');
    
    // CSVデータをJSON形式に変換
    const jsonData = rows.slice(1).map(row => {
      const values = row.split(',');
      return headers.reduce((obj, header, index) => {
        obj[header.trim()] = values[index].trim();
        return obj;
      }, {});
    });
    
    console.log(jsonData);
    

    const drawChart = async () => {

      const svg = d3.select(chartRef.current);

      // 商品名のラベルを表示
      const labels = svg.selectAll("text").data(jsonData).enter().append("text");

      labels.text((d) => d.商品名)
        .attr("y", (d, i) => i * 40 + 50) // ラベルのX座標（中央に調整）
        .attr("x", 30) // ラベルのY座標
        // .attr("text-anchor", "middle") // テキストを中央揃えにする
        .attr("fill", "black") // ラベルの色
        .attr("font-size", "12px");

      // 棒グラフの初期設定（高さ0）
      const bar = svg.selectAll("rect").data(jsonData).enter().append("rect");

      // bar.attr("x", (d, i) => i * 60 + 30)
      //   .attr("y", 300)
      //   .attr("height", 0)
      //   .attr("width", 30);

      // // 棒グラフのアニメーション
      // bar.transition()
      //   .delay((d, i) => i * 100)
      //   .duration(300)
      //   .attr("y", (d) => 300 - d.エネルギー/2)
      //   .attr("height", (d) => d.エネルギー/2);

      bar.attr("y", (d, i) => i * 40 + 30)
        .attr("x", 360)
        .attr("height", 30)
        .attr("width", 0);

      // 棒グラフのアニメーション
      bar.transition()
        .delay((d, i) => i * 100)
        .duration(700)
        .attr("x", (d) => 360)
        .attr("width", (d) => d.エネルギー/2)
        .on("end", (d, i) => {
          // アニメーションが完了したら値を表示
          // svg.append("text")
          // .attr("x", 360 + d.エネルギー / 2 + 5) // テキストのX座標（バーの右横に調整）
          // .attr("y", i * 60 + 50) // テキストのY座標
          // .text(d.エネルギー)
          // .attr("fill", "black")
          // .attr("font-size", "12px")
          // .attr("opacity", 0) // 初期状態で透明に設定
          // .transition() // フェードインのアニメーション
          // .delay(700) // 棒グラフのアニメーションが終わってから開始
          // .duration(500)
          // .attr("opacity", 1); // アニメーション中に不透明に変更
                showText(d, i);
        });

// テキストを表示する関数
const showText = (d, i) => {
  svg.append("text")
    .attr("x", 360 + d.エネルギー / 2) // テキストのX座標（バーの右横に調整）
    .attr("y", i * 40 + 50) // テキストのY座標
    .text(d.エネルギー + ' kcal')
    .attr("fill", "black")
    .attr("font-size", "12px")
    .attr("opacity", 0) // 初期状態で透明に設定
    .transition() // フェードインのアニメーション
    .duration(500)
    .attr("opacity", 1) // アニメーション中に不透明に変更
    .attr("x", 360 + d.エネルギー / 2 + 5); // テキストのX座標（バーの右横に調整）
};

    };

    
    drawChart();
  }, []);

  return (
    <svg ref={chartRef} width={800} height={500}>
      {/* D3-rendered elements go here */}
    </svg>
  );
};

export default D3Chart;
